plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

archivesBaseName = project.archives_base_name
version = "${project.version}"
group = project.maven_group

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release/'
	}
	maven { url 'https://jitpack.io' }
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/betterenchantmentboosting.accesswidener")
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	// Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	/*
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	*/
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilt.standard.libraries
	modImplementation libs.quilted.fabric.api
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one

	// All this to verify that a single mixin to easy magic would work
	modCompileOnly "maven.modrinth:easy-magic:v8.0.1-1.20.1-Fabric"
	modCompileOnly "maven.modrinth:puzzles-lib:v8.0.23-1.20.1-Fabric"
	modCompileOnly "maven.modrinth:forge-config-api-port:v8.0.0-1.20.1-Fabric"

	modRuntimeOnly "maven.modrinth:easy-magic:v8.0.1-1.20.1-Fabric"
	modRuntimeOnly "maven.modrinth:puzzles-lib:v8.0.23-1.20.1-Fabric"
	modRuntimeOnly "maven.modrinth:forge-config-api-port:v8.0.0-1.20.1-Fabric"
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.2.1"
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.2.1"
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-block:5.2.1"
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:5.2.1"
	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-world:5.2.1"
	modRuntimeOnly "com.terraformersmc:modmenu:7.0.1"
	modRuntimeOnly "com.terraformersmc.terraform-api:terraform-wood-api-v1:7.0.1"
	modRuntimeOnly "maven.modrinth:aurorasdecorations:1.0.0-beta.21+1.20.1"
	// modRuntimeOnly "maven.modrinth:templates-2:2.1.1-fabric-1.20.1"
}

processResources {
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

jar {
	filesMatching('LICENSE') {
		rename '^(LICENSE.*?)(\\..*)?$', "\$1_${archivesBaseName}\$2"
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			groupId = group
			artifactId = archivesBaseName
			version = project.version
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		def env = System.getenv()
		maven {
			url = "https://maven.redstoneparadox.xyz/releases"
			credentials {
				username = env.MAVEN_USER_RP
				password = env.MAVEN_PASSWORD_RP
			}
		}
	}
}
